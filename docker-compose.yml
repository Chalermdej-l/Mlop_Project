version: "3.9"

networks:
  back-tier:
  front-tier:    
  monitor-tier:
  
services:
  db:
    container_name: mldb
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${USER_DB}
      POSTGRES_PASSWORD: ${PASS_DB}
    volumes:
      - ${VOLUMN_PATH}:/var/lib/postgresql/data
    networks:
      - back-tier
    profiles: ["mlflow"]


  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - back-tier
    profiles: ["mlflow"]
    depends_on:
        - db
  mlserver:
    restart: always
    image: mlflow
    depends_on:
        - db
    ports:
        - "5000:5000"    
    networks:
        - back-tier 

    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql://${USER_DB}:${PASS_DB}@db:5432/${DB_NAME} --default-artifact-root s3://${S3_BUCKET}
    profiles: ["mlflow"]
  
  webapp:
    restart: always
    image: webapp
    ports:
        - "9696:9696"  
    networks:
      - front-tier
    environment:
        - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
        - AWS_SECRET_ACCESS_KEY=${ACCESS_SCRECT}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        - RUN_ID=${RUN_ID}
        - S3_BUCKET=${S3_BUCKET}
        - EXPERIMENT_ID=${EXPERIMENT_ID}
        - DB_NAME_GRAFANA=${DB_NAME_GRAFANA}
        - IP_MONITOR=${IP_MONITOR}
    command: waitress-serve --host 0.0.0.0 --port 9696 predict:app
    depends_on: 
      - db-grafana
    profiles: ["webapp"]
  
  db-grafana:
    container_name: monitordb
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_DB:  ${DB_NAME_GRAFANA}
      POSTGRES_USER: ${USER_DB}
      POSTGRES_PASSWORD: ${PASS_DB}
    ports:
      - 5432:5432
    volumes:
      - ${VOLUMN_PATH_MONITOR}:/var/lib/postgresql/data
      - ${VOLUMN_PATH_SCRIPT}:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - front-tier
      - monitor-tier
    profiles: ["webapp","monitor"]


  adminer-grafana:
    image: adminer
    restart: always
    ports:
      - "8081:8080"
    networks:
      - monitor-tier
      - front-tier
    depends_on: 
      - db-grafana
    profiles: ["webapp","monitor"]

  grafana:
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    volumes:
      - ./config/datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./config/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./config/dashboards:/opt/grafana/dashboards
    networks:
      - monitor-tier
    restart: always
    profiles: ["monitor"]
    depends_on: 
      - db-grafana